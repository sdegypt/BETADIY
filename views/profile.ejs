<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <meta name="description" content="الملف الشخصي لـ <%= user && user.name ? user.name : 'مستخدم' %> - عرض المعلومات الشخصية، معرض أعمال التصميم، والاقتباس الشخصي على DIY." />
    <meta name="keywords" content="<%= user && user.name ? user.name : 'مستخدم' %>, ملف شخصي, تصميم, DIY, أعمال إبداعية" />
    <meta name="author" content="<%= user && user.name ? user.name : 'مستخدم' %>" />
    <meta name="robots" content="index, follow" />
    <meta name="googlebot" content="index, follow" />
    <title>الملف الشخصي لـ <%= user && user.name ? user.name : 'مستخدم' %> | DIY</title>

    <link rel="stylesheet" href="/css/profile.min.css" />
    <link rel="stylesheet" href="/css/responsive.css" />
    <link rel="stylesheet" href="/css/messages-ui.css" />


    <% const avatarUrl = user && user.avatar && user.avatar.startsWith('http') ? user.avatar : '/uploads/images/pngwing.com.png'; %>
    <link rel="preload" href="<%= avatarUrl %>" as="image" />

    <meta property="og:title" content="الملف الشخصي لـ <%= user && user.name ? user.name : 'مستخدم' %> | DIY" />
    <meta property="og:description" content="استعرض المعلومات الشخصية ومعرض أعمال <%= user && user.name ? user.name : 'مستخدم' %> على DIY." />
    <meta property="og:type" content="profile" />
    <meta property="og:url" content="https://www.colorizer.com/profile/<%= user && user.id ? user.id : '' %>" />
    <meta property="og:image" content="<%= avatarUrl %>" />
    <meta property="og:image:alt" content="صورة الملف الشخصي لـ <%= user && user.name ? user.name : 'مستخدم' %>" />
    <meta property="og:site_name" content="DIY" />
    <meta property="og:locale" content="ar_AR" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="الملف الشخصي لـ <%= user && user.name ? user.name : 'مستخدم' %> | DIY" />
    <meta name="twitter:description" content="استعرض المعلومات الشخصية ومعرض أعمال <%= user && user.name ? user.name : 'مستخدم' %> على DIY." />
    <meta name="twitter:image" content="<%= avatarUrl %>" />

    <link rel="dns-prefetch" href="//www.colorizer.com" />
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" />

    <style>
        /* إعادة تعريف أنماط الإشعارات */
        .feedback-message-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 400px;
        }
        
        .alert {
            border-radius: 10px;
            border: none;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
            margin-bottom: 10px;
            padding: 15px 20px;
            font-weight: 500;
            animation: slideIn 0.3s ease-out;
        }
        
        .alert-success {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }
        
        .alert-error {
            background: linear-gradient(135deg, #dc3545, #e83e8c);
            color: white;
        }
        
        .alert-warning {
            background: linear-gradient(135deg, #ffc107, #fd7e14);
            color: #343a40;
        }
        
        .alert-info {
            background: linear-gradient(135deg, #17a2b8, #6f42c1);
            color: white;
        }
        
        .btn-close {
            background: none;
            border: none;
            color: inherit;
            font-size: 1.2em;
            opacity: 0.7;
            cursor: pointer;
            float: left;
            margin-left: 10px;
        }
        
        .btn-close:hover {
            opacity: 1;
        }
        
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        /* تحديث خلفية الهيدر بتدرجات برتقالية */
        .profile-header {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #ff7e5f, #feb47b);
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }
        
        @media (min-width: 768px) {
            .profile-header {
                grid-template-columns: 160px 1fr auto;
                grid-template-areas: 
                    "avatar info actions"
                    "avatar stats actions";
            }
            
            .avatar-section {
                grid-area: avatar;
            }
            
            .user-info {
                grid-area: info;
            }
            
            .stats {
                grid-area: stats;
            }
            
            .action-buttons {
                grid-area: actions;
                align-self: center;
            }
        }
        
        @media (max-width: 767px) {
            .profile-header {
                grid-template-areas: 
                    "avatar"
                    "info"
                    "stats"
                    "actions";
                text-align: center;
            }
            
            .avatar-section {
                justify-self: center;
            }
            
            .action-buttons {
                display: grid;
                grid-template-columns: 1fr;
                gap: 12px;
            }
        }
        
        .avatar-section {
            position: relative;
        }
        
        .profile-picture {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid #fff;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .profile-picture:hover {
            transform: scale(1.03);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }
        
        .user-info h1 {
            font-size: 1.8rem;
            margin-bottom: 10px;
            color: #2d3748;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .stat-item {
            background: white;
            padding: 12px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }
        
        .stat-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .stat-item i {
            font-size: 1.5rem;
            margin-bottom: 8px;
            color: #ff7e5f;
        }
        
        .stat-item span {
            display: block;
            font-weight: 600;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #718096;
            margin-top: 3px;
        }
        
        .ranking-progress {
            margin-top: 20px;
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
        }
        
        .progress-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 0.9rem;
            color: #4a5568;
        }
        
        .progress-bar {
            height: 12px;
            background: #e2e8f0;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff7e5f, #feb47b);
            border-radius: 10px;
            transition: width 0.8s ease;
        }
        
        .progress-text {
            text-align: center;
            margin-top: 8px;
            font-size: 0.85rem;
            color: #718096;
        }
        
        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 15px;
            min-width: 200px;
        }
        
        .action-button {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .action-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        
        .friend-button {
            background: linear-gradient(135deg, #ff7e5f, #feb47b);
            color: white;
        }
        
        .like-button {
            background: linear-gradient(135deg, #f56565, #e53e3e);
            color: white;
        }
        
        .like-button.liked {
            background: linear-gradient(135deg, #48bb78, #38a169);
        }
        
        .button-icon i {
            font-size: 1.2rem;
        }
        
        @media (max-width: 480px) {
            .profile-picture {
                width: 120px;
                height: 120px;
            }
            
            .stats {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                min-width: auto;
            }
        }
        
        .profile-details {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 15px;
        }
        
        .info-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .info-label {
            font-weight: 600;
            color: #4a5568;
        }
        
        .info-value {
            color: #2d3748;
        }
        
        /* تحسين تصميم معرض الأعمال */
        .design-gallery-section {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }
        
        .general-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            position: relative;
        }
        
        .content {
            height: 250px;
            border-radius: 10px;
            background-size: cover;
            background-position: center;
            position: relative;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .content:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }
        
        .title-card {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent);
            color: white;
            padding: 15px;
            border-radius: 0 0 10px 10px;
        }
        
        .title-card .marg-bott {
            display: block;
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .title-card .subtitle {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .delete-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.3s ease;
        }
        
        .delete-btn:hover {
            background: #dc3545;
            color: white;
        }
        
        .add-design-btn {
            background: linear-gradient(135deg, #ff7e5f, #feb47b);
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s ease;
            margin-top: 20px;
        }
        
        .add-design-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        
        .quote-section {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }
        
        .quote-container {
            position: relative;
        }
        
        #quote-editor {
            width: 100%;
            min-height: 150px;
            padding: 20px;
            border: none;
            border-radius: 10px;
            background: #f8f9fa;
            font-size: 1.1rem;
            line-height: 1.6;
            resize: none;
            transition: border 0.3s ease;
        }
        
        .edit-quote-button, .save-quote-button {
            position: absolute;
            bottom: 15px;
            left: 15px;
            background: linear-gradient(135deg, #ff7e5f, #feb47b);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .save-quote-button {
            background: linear-gradient(135deg, #48bb78, #38a169);
        }
        
        .edit-quote-button:hover, .save-quote-button:hover {
            transform: scale(1.1);
        }
        
        /* تحسينات لتحميل الصور في المعرض */
        .content img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }
        
        /* تحسين تصميم زر تعديل الملف */
        .edit-profile-button {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            background: linear-gradient(135deg, #ff7e5f, #feb47b);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .edit-profile-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        
        /* تحسين متجاوب إضافي */
        @media (max-width: 480px) {
            .general-container {
                grid-template-columns: 1fr;
            }
            
            .content {
                height: 200px;
            }
        }

        .design-slider {
            padding: 0;
            width: 100%;
            max-width: 609px;
            height: 420px;
            margin: 0 auto 30px auto;
            position: relative;
            direction: rtl;
        }
        .design-slider input[type=radio] {
            display: none;
        }
        .design-slider .slide-container {
            display: none;
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            right: 0;
            left: 0;
            bottom: 0;
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            overflow: hidden;
            z-index: 1;
        }
        .design-slider .slide {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        .design-slider .slide img {
            max-width: 100%;
            max-height: 320px;
            border-radius: 10px;
            margin-bottom: 10px;
            box-shadow: 0 2px 8px #eee;
        }
        .design-slider .title-card {
            background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
            color: #fff;
            padding: 10px 15px 5px 15px;
            border-radius: 0 0 10px 10px;
            width: 100%;
            text-align: center;
            margin: 0;
            position: absolute;
            bottom: 0;
            left: 0;
        }
        .design-slider .delete-btn {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255,255,255,0.9);
            border: none;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.3s ease;
            z-index: 2;
        }
        .design-slider .delete-btn:hover {
            background: #dc3545;
            color: #fff;
        }
        .design-slider .nav {
            position: absolute;
            width: 100%;
            top: 50%;
            display: flex;
            justify-content: space-between;
            transform: translateY(-50%);
            z-index: 2;
        }
        .design-slider .nav label {
            cursor: pointer;
            font-size: 2.5rem;
            color: #ff7e5f;
            background: rgba(255,255,255,0.7);
            border-radius: 50%;
            padding: 0 12px;
            margin: 0 10px;
            transition: background 0.2s;
            user-select: none;
        }
        .design-slider .nav label:hover {
            background: #feb47b;
            color: #fff;
        }
        .design-slider .nav-dots {
            width: 100%;
            text-align: center;
            position: absolute;
            bottom: 18px;
            z-index: 3;
        }
        .design-slider .nav-dot {
            display: inline-block;
            width: 14px;
            height: 14px;
            border-radius: 50%;
            background: #e2e8f0;
            margin: 0 4px;
            cursor: pointer;
            transition: background 0.3s;
        }
        .design-slider input[type=radio]:checked ~ .slide-container {
            display: block;
            animation: fadeIn 0.7s;
        }
        .design-slider input[type=radio]:checked ~ .nav-dots label[for^="img-"] {
            background: #ff7e5f;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @media (max-width: 700px) {
            .design-slider {
                max-width: 100vw;
                height: 260px;
            }
            .design-slider .slide img {
                max-height: 160px;
            }
        }
    </style>
</head>
<body>
<% function getCloudinaryImageUrl(image, fallback) {
  if (!image) return fallback || '/uploads/images/pngwing.com.png';
  if (image.startsWith('http')) return image;
  if (image.startsWith('/uploads/') || image.startsWith('/gallery/') || image.startsWith('/images/')) return image;
  // إذا كان مجرد اسم ملف (بدون مسار)، اعتبره من uploads/gallery
  return '/uploads/gallery/' + image;
} %>
    <% if (!user || !user.id) { %>
        <p>خطأ: المستخدم غير موجود</p>
    <% } else { %>
        <%- include("partials/headerhome") %>
        <%- include("partials/headeraction") %>

        <main class="main">
            <div id="feedback-message-profile" class="feedback-message-container"></div>

            <div class="profile-header">
                <div class="avatar-section">
                    <% if (user.avatar && user.avatar !== '/uploads/images/pngwing.com.png') { %>
                      <img src="<%= getCloudinaryImageUrl(user.avatar, '/uploads/images/pngwing.com.png') %>"
                           alt="Profile Picture"
                           class="profile-picture"
                           onerror="this.style.display='none'; this.nextElementSibling.style.display='inline-block';">
                      <span class="fa fa-user-circle fa-5x" style="color: #aaa; display:none;"></span>
                    <% } else { %>
                      <span class="fa fa-user-circle fa-5x" style="color: #aaa;"></span>
                    <% } %>
                </div>
                
                <div class="user-info">
                    <h1 id="username"><%= user.name || "مستخدم" %></h1>
                    
                    <div class="stats">
                        <div class="stat-item likes-stat">
                            <i class="fas fa-heart"></i>
                            <span id="like-count"><%= user.likes || 0 %></span>
                            <span class="stat-label">إعجاب</span>
                        </div>
                        <div class="stat-item ranking-stat">
                            <i class="fas fa-trophy"></i>
                            <span id="ranking-count"><%= user.ranking || 0 %></span>
                            <span class="stat-label">مستوى</span>
                        </div>
                        <div class="stat-item posts-stat">
                            <a href="/forum/my-posts" class="share-link">
                                <i class="fas fa-share-alt"></i>
                                <span id="share-count"><%= user.share || 0 %></span>
                                <span class="stat-label">مشاركات</span>
                            </a>
                        </div>
                    </div>
                    
                    <div class="ranking-progress">
                        <div class="progress-info">
                            <span class="current-level">المستوى <%= user.ranking || 0 %></span>
                            <span class="next-level">المستوى <%= (user.ranking || 0) + 1 %></span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" id="ranking-progress-fill"></div>
                        </div>
                        <div class="progress-text">
                            <span id="progress-points">جار الحساب...</span>
                        </div>
                    </div>
                </div>
                
                <div class="action-buttons">
                    <% if (typeof userId !== "undefined" && userId !== user.id) { %>
                        <button type="button" id="friend-action-button" 
                                class="action-button friend-button" 
                                data-friend-id="<%= user.id %>" 
                                data-initial-status="<%= relationshipStatus || 'no_friend' %>">
                            <span class="button-icon"><i class="fas fa-spinner fa-spin"></i></span>
                            <span class="button-text">جار التحميل...</span>
                        </button>

                        <button type="button" id="likeButton" class="action-button like-button <%= user.liked ? 'liked' : '' %>" data-user-id="<%= user.id %>">
                            <span class="button-icon"><i class="fas <%= user.liked ? 'fa-heart-crack' : 'fa-heart' %>"></i></span>
                            <span class="button-text"><%= user.liked ? 'إلغاء الإعجاب' : 'إعجاب' %></span>
                        </button>
                    <% } %>
                </div>
            </div>

            <div class="profile-details">
                <div class="details-section">
                    <h2>المعلومات الشخصية</h2>
                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-label">:العمر</span>
                            <span class="info-value" id="age"><%= user.age || '-' %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">:الجنس</span>
                            <span class="info-value" id="gender"><%= user.gender || '-' %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">:البلد</span>
                            <span class="info-value" id="country"><%= user.country || '-' %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">:اللغة</span>
                            <span class="info-value" id="language"><%= user.language || '-' %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">:المهنة</span>
                            <span class="info-value" id="skills"><%= user.occupation || '-' %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">البريد :</span>
                            <span class="info-value" id="email"><%= user.email || '-' %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">الهاتف :</span>
                            <span class="info-value" id="phone"><%= user.phone || '-' %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">الملف الشخصي :</span>
                            <% if (user.portfolio) { %>
                                <a href="<%= user.portfolio %>" class="info-value" target="_blank" rel="noopener noreferrer">زيارة</a>
                            <% } else { %>
                                <span class="info-value">-</span>
                            <% } %>
                        </div>
                        <div class="info-item">
                            <span class="info-label">تاريخ الانضمام :</span>
                            <span class="info-value"><%= user.join_date ? new Date(user.join_date).toISOString().split('T')[0] : '-' %></span>
                        </div>
                    </div>
                </div>
                <% if (typeof userId !== 'undefined' && userId === user.id) { %>
                    <div style="display: flex; gap: 15px; margin-top: 20px;">
                        <a href="/updateProfile" id="edit-profile-button" class="edit-profile-button">
                            <i class="fas fa-edit"></i> تعديل المعلومات
                        </a>
                        <button id="request-store-button" class="edit-profile-button" style="background: linear-gradient(45deg, #28a745, #20c997); border: none; cursor: pointer;">
                            <i class="fas fa-store"></i> طلب إنشاء متجر
                        </button>
                    </div>
                <% } %>
            </div>

            <div class="design-gallery-section">
                <h2 class="section-title">معرض أعمال التصميم</h2>
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
                <div class="swiper design-swiper">
                  <div class="swiper-wrapper">
                    <% if (Array.isArray(gallery) && gallery.length > 0) { %>
                      <% gallery.forEach(function(item) { %>
                        <div class="swiper-slide">
                          <div class="gallery-item">
                            <img src="<%= getCloudinaryImageUrl(item.image, '/uploads/images/pngwing.com.png') %>" alt="<%= item.title || 'عمل تصميم' %>" loading="lazy" onerror="this.src='/uploads/images/pngwing.com.png'" class="design-gallery-img" style="cursor:zoom-in;" />
    <!-- Overlay for image preview -->
    <div id="design-image-overlay" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.85); z-index:9999; align-items:center; justify-content:center; transition:background 0.3s;">
      <span id="close-design-overlay" style="position:absolute; top:30px; left:30px; color:#fff; font-size:2.5rem; cursor:pointer; z-index:10001; background:rgba(0,0,0,0.3); border-radius:50%; padding:0 16px; line-height:1; transition:background 0.2s;"><i class="fas fa-times"></i></span>
      <img id="overlay-design-img" src="" alt="معاينة العمل" style="max-width:90vw; max-height:80vh; border-radius:18px; box-shadow:0 8px 32px #0008; border:6px solid #fff; display:block; margin:auto; animation:fadeIn 0.4s;" />
      <div id="overlay-design-title" style="color:#fff; text-align:center; font-size:1.2rem; margin-top:18px; font-weight:600; text-shadow:0 2px 8px #000a;"></div>
    </div>
                            <% if (typeof userId !== 'undefined' && userId === user.id) { %>
                              <form class="delete-form" data-design-id="<%= item.id %>">
                                <button type="submit" class="delete-btn design-delete-btn" aria-label="حذف العمل">
                                  <i class="fas fa-trash-alt"></i>
                                </button>
                              </form>
                            <% } %>
                            <h3 class="title-card">
                              <span class="marg-bott"><%= item.title || 'عنوان افتراضي' %></span>
                              <span class="subtitle"><%= item.subtitle || '' %></span>
                            </h3>
                          </div>
                        </div>
                      <% }); %>
                    <% } else { %>
                      <div class="swiper-slide">
                        <p class="no-items-message">لا توجد أعمال تصميم بعد.</p>
                      </div>
                    <% } %>
                  </div>
                  <!-- Add Arrows -->
                  <div class="swiper-button-next"></div>
                  <div class="swiper-button-prev"></div>
                  <!-- Add Pagination -->
                  <div class="swiper-pagination"></div>
                </div>
                <style>
                  .design-swiper {
                    width: 100%;
                    max-width: 700px;
                    margin: 0 auto 30px auto;
                    padding-bottom: 40px;
                  }
                  .swiper-slide {
                    display: flex;
                    justify-content: center;
                    align-items: stretch;
                    height: auto;
                  }
                  .gallery-item {
                    position: relative;
                    background: #fff;
                    border-radius: 15px;
                    box-shadow: 0 5px 15px rgba(0,0,0,0.08);
                    overflow: hidden;
                    width: 100%;
                    max-width: 400px;
                    min-width: 220px;
                    display: flex;
                    flex-direction: column;
                    justify-content: flex-end;
                  }
                  .gallery-item img {
                    width: 100%;
                    height: 220px;
                    object-fit: cover;
                    border-radius: 15px 15px 0 0;
                    display: block;
                  }
                  .gallery-item .delete-btn {
                    position: absolute;
                    top: 10px;
                    left: 10px;
                    background: rgba(255,255,255,0.9);
                    border: none;
                    border-radius: 50%;
                    width: 35px;
                    height: 35px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    transition: background 0.3s ease;
                    z-index: 2;
                  }
                  .gallery-item .delete-btn:hover {
                    background: #dc3545;
                    color: #fff;
                  }
                  .gallery-item .title-card {
                    background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
                    color: #fff;
                    padding: 10px 15px 5px 15px;
                    border-radius: 0 0 10px 10px;
                    width: 100%;
                    text-align: center;
                    margin: 0;
                    position: absolute;
                    bottom: 0;
                    left: 0;
                  }
                  @media (max-width: 700px) {
                    .design-swiper {
                      max-width: 98vw;
                    }
                    .gallery-item img {
                      height: 140px;
                    }
                  }
                </style>
                <% if (typeof userId !== 'undefined' && userId === user.id) { %>
                  <div class="add-design-container">
                    <button id="add-design-btn" class="add-design-btn"><i class="fas fa-plus"></i> إضافة عمل تصميم</button>
                    <form id="add-design-form" action="/profile/design/add" method="POST" style="display: none;" enctype="multipart/form-data">
                      <input type="file" name="image" accept="image/*" required>
                      <input type="text" name="title" placeholder="عنوان العمل" required>
                      <input type="text" name="subtitle" placeholder="عنوان فرعي (اختياري)">
                      <button type="submit" class="share-btn">إضافة</button>
                      <button type="button" id="cancel-design-btn" class="cancel-btn">إلغاء</button>
                    </form>
                  </div>
                <% } %>
                <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
                <script>
                  document.addEventListener('DOMContentLoaded', function() {
                    var swiper = new Swiper('.design-swiper', {
                      slidesPerView: 1,
                      spaceBetween: 30,
                      loop: true,
                      navigation: {
                        nextEl: '.swiper-button-next',
                        prevEl: '.swiper-button-prev',
                      },
                      pagination: {
                        el: '.swiper-pagination',
                        clickable: true,
                      },
                      breakpoints: {
                        600: { slidesPerView: 2 },
                        900: { slidesPerView: 3 }
                      }
                    });

                    // تكبير صورة المعرض في overlay
                    function showDesignOverlay(imgSrc, title) {
                      const overlay = document.getElementById('design-image-overlay');
                      const overlayImg = document.getElementById('overlay-design-img');
                      const overlayTitle = document.getElementById('overlay-design-title');
                      overlayImg.src = imgSrc;
                      overlayTitle.textContent = title || '';
                      overlay.style.display = 'flex';
                      document.body.style.overflow = 'hidden';
                    }
                    function hideDesignOverlay() {
                      document.getElementById('design-image-overlay').style.display = 'none';
                      document.body.style.overflow = '';
                    }
                    document.querySelectorAll('.design-gallery-img').forEach(function(img) {
                      img.addEventListener('click', function() {
                        showDesignOverlay(this.src, this.alt);
                      });
                    });
                    document.getElementById('close-design-overlay').onclick = hideDesignOverlay;
                    document.getElementById('design-image-overlay').addEventListener('click', function(e) {
                      if (e.target === this) hideDesignOverlay();
                    });
                    document.addEventListener('keydown', function(e) {
                      if (e.key === 'Escape') hideDesignOverlay();
                    });
                  });
                </script>
            </div>

            <div class="quote-section">
                <div class="quote-container">
                    <i class="fas fa-quote-right quote-icon"></i>
                    <textarea id="quote-editor" readonly placeholder="أضف اقتباسًا هنا..."><%= user.quote || '' %></textarea>
                    <% if (typeof userId !== 'undefined' && userId === user.id) { %>
                        <button id="edit-quote-button" class="edit-quote-button" aria-label="تعديل الاقتباس">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button id="save-quote-button" class="save-quote-button" style="display: none" aria-label="حفظ الاقتباس">
                            <i class="fas fa-save"></i>
                        </button>
                    <% } %>
                </div>
            </div>

            <% if (typeof stores !== 'undefined' && stores.length > 0) { %>
                <div class="my-stores-section" style="margin: 30px 0;">
                    <h2 style="font-size:1.3rem; margin-bottom: 15px;"><i class="fas fa-store"></i> متاجري</h2>
                    <div style="display: flex; flex-wrap: wrap; gap: 20px;">
                        <% stores.forEach(function(store) { if(store.status === 'approved') { %>
                            <div class="store-card" style="background:#fff; border-radius:10px; box-shadow:0 2px 8px #eee; padding:20px; min-width:220px;">
                                <h3 style="margin-bottom:10px;"><%= store.name %></h3>
                                <p style="color:#666; font-size:0.95rem; margin-bottom:10px;"><%= store.description %></p>
                                <a href="/stores/<%= store.id %>/dashboard" class="btn btn-primary" style="display:inline-block; margin-top:10px; background:#ff7e5f; color:#fff; padding:8px 18px; border-radius:6px; text-decoration:none; font-weight:600;">
                                    <i class="fas fa-cogs"></i> إدارة المتجر
                                </a>
                            </div>
                        <% } }); %>
                    </div>
                </div>
            <% } %>
        </main>

        <%- include("partials/footer") %>
    <% } %>

    <script>
        function displayProfileFeedback(message, type = "success") {
            showNotification(message, type);
        }

        document.addEventListener("DOMContentLoaded", () => {
            const currentUserId = "<%= typeof userId !== 'undefined' ? userId : null %>";
            const profileUserId = "<%= user && user.id ? user.id : '' %>";
            const friendActionButton = document.getElementById("friend-action-button");
            const likeButton = document.getElementById("likeButton");

            async function loadRankingDetails() {
                const progressFill = document.getElementById('ranking-progress-fill');
                const progressPoints = document.getElementById('progress-points');
                const rankingCount = document.getElementById('ranking-count');
                const rankingStat = document.querySelector('.ranking-stat');

                if (!progressFill || !progressPoints || !rankingCount) {
                    console.error('عناصر واجهة المستوى غير موجودة');
                    return;
                }

                try {
                    const response = await fetch(`/profile/ranking-details?userId=${profileUserId}`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();

                    if (data.success && data.rankingData) {
                        const { currentLevel, totalPoints, pointsToNextLevel, progressPercentage } = data.rankingData;

                        // Update UI elements
                        rankingCount.textContent = currentLevel || 0;
                        console.log("progressPercentage:", progressPercentage, typeof progressPercentage);
                        progressFill.style.width = `${progressPercentage}%`;
                        progressPoints.textContent = `${pointsToNextLevel} نقطة للمستوى التالي`;

                        if (rankingStat) {
                            rankingStat.classList.add('ranking-tooltip');
                            rankingStat.setAttribute('data-tooltip', `المجموع: ${totalPoints || 0} نقطة`);
                        }
                    } else {
                        throw new Error(data.message || 'فشل تحميل بيانات المستوى');
                    }
                } catch (error) {
                    console.error('خطأ في تحميل بيانات المستوى:', error);
                    progressPoints.textContent = 'خطأ في تحميل البيانات';
                    progressFill.style.width = '0%';
                    showNotification('فشل تحميل بيانات المستوى', 'error');
                }
            }

            // Initial load of ranking details
            loadRankingDetails();

            function showNotification(message, type = "success") {
                const container = document.getElementById('feedback-message-profile');
                if (!container) return;

                container.innerHTML = '';
                
                const notification = document.createElement('div');
                notification.className = `alert alert-${type}`;
                notification.innerHTML = `
                    <span class="notification-message">${message}</span>
                    <button type="button" class="btn-close" onclick="this.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                
                container.appendChild(notification);
                
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.style.animation = 'slideOut 0.3s ease-out';
                        setTimeout(() => {
                            if (notification.parentElement) {
                                notification.remove();
                            }
                        }, 300);
                    }
                }, 5000);
            }

            function updateFriendButton(status) {
                if (!friendActionButton) return;
                
                console.log('تحديث زر الصداقة إلى الحالة:', status);

                const icon = friendActionButton.querySelector(".button-icon i");
                const text = friendActionButton.querySelector(".button-text");
                friendActionButton.classList.remove("status-no_friend", "status-pending_sent", "status-pending_received", "status-accepted");

                switch (status) {
                    case "no_friend":
                        icon.className = "fas fa-user-plus";
                        text.textContent = "إضافة صديق";
                        friendActionButton.classList.add("status-no_friend");
                        friendActionButton.dataset.action = "send_request";
                        break;
                    case "pending_sent":
                        icon.className = "fas fa-user-clock";
                        text.textContent = "إلغاء الطلب";
                        friendActionButton.classList.add("status-pending_sent");
                        friendActionButton.dataset.action = "cancel_request";
                        break;
                    case "pending_received":
                        icon.className = "fas fa-user-check";
                        text.textContent = "قبول الطلب";
                        friendActionButton.classList.add("status-pending_received");
                        friendActionButton.dataset.action = "accept_request";
                        break;
                    case "accepted":
                        icon.className = "fas fa-user-minus";
                        text.textContent = "إزالة صديق";
                        friendActionButton.classList.add("status-accepted");
                        friendActionButton.dataset.action = "remove_friend";
                        break;
                    default:
                        console.log('حالة غير متوقعة:', status, 'استخدام الحالة الافتراضية');
                        icon.className = "fas fa-user-plus";
                        text.textContent = "إضافة صديق";
                        friendActionButton.classList.add("status-no_friend");
                        friendActionButton.dataset.action = "send_request";
                        break;
                }
                
                console.log('تم تحديث الزر بنجاح، الحالة الجديدة:', status);
            }

            async function handleFriendAction(action) {
                try {
                    friendActionButton.disabled = true;
                    const icon = friendActionButton.querySelector(".button-icon i");
                    const text = friendActionButton.querySelector(".button-text");
                    const originalIcon = icon.className;
                    const originalText = text.textContent;

                    icon.className = "fas fa-spinner fa-spin";
                    text.textContent = "جارٍ التنفيذ...";

                    let endpoint, body;
                    
                    switch(action) {
                        case "send_request":
                            endpoint = "/friends/send-request";
                            body = JSON.stringify({ friendId: parseInt(profileUserId) });
                            break;
                        case "cancel_request":
                            endpoint = "/friends/cancel-request";
                            body = JSON.stringify({ friendId: parseInt(profileUserId) });
                            break;
                        case "accept_request":
                            try {
                                const requestsResponse = await fetch("/friends/status/" + profileUserId);
                                const statusData = await requestsResponse.json();
                                if (statusData.status === 'request_received') {
                                    const allRequestsResponse = await fetch("/friends");
                                    const allRequestsData = await allRequestsResponse.text();
                                    const requestMatch = allRequestsData.match(/data-request-id="(\d+)"/);
                                    if (requestMatch) {
                                        const requestId = requestMatch[1];
                                        endpoint = "/friends/accept-request";
                                        body = JSON.stringify({ requestId: parseInt(requestId) });
                                    } else {
                                        showNotification("طلب الصداقة غير موجود", "error");
                                        return;
                                    }
                                } else {
                                    showNotification("لا يوجد طلب صداقة لقبوله", "error");
                                    return;
                                }
                            } catch (error) {
                                showNotification("خطأ في البحث عن طلب الصداقة", "error");
                                return;
                            }
                            break;
                        case "remove_friend":
                            endpoint = "/friends/remove-friend";
                            body = JSON.stringify({ friendId: parseInt(profileUserId) });
                            break;
                        default:
                            showNotification("إجراء غير صالح", "error");
                            return;
                    }

                    const response = await fetch(endpoint, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: body
                    });

                    const result = await response.json();
                    
                    if (result.success) {
                        showNotification(result.message, "success");
                        
                        let newStatus;
                        switch(action) {
                            case "send_request":
                                newStatus = "pending_sent";
                                break;
                            case "cancel_request":
                            case "remove_friend":
                                newStatus = "no_friend";
                                break;
                            case "accept_request":
                                newStatus = "accepted";
                                break;
                            default:
                                newStatus = "no_friend";
                        }
                        
                        updateFriendButton(newStatus);
                        
                        if (result.likes !== undefined) {
                            document.getElementById("like-count").textContent = result.likes;
                        }
                        if (result.ranking !== undefined) {
                            document.getElementById("ranking-count").textContent = result.ranking;
                            loadRankingDetails(); // Reload ranking details after friend action
                        }
                    } else {
                        showNotification(result.message, "error");
                        icon.className = originalIcon;
                        text.textContent = originalText;
                    }
                } catch (error) {
                    console.error("خطأ في معالجة الإجراء:", error);
                    showNotification("حدث خطأ أثناء معالجة الطلب", "error");
                } finally {
                    friendActionButton.disabled = false;
                }
            }

            if (friendActionButton) {
                const initialStatus = "<%= relationshipStatus || 'no_friend' %>";
                console.log('الحالة الأولية للزر:', initialStatus);
                updateFriendButton(initialStatus);

                friendActionButton.addEventListener("click", async () => {
                    const action = friendActionButton.dataset.action;
                    if (!action) return;

                    if (action === "remove_friend") {
                        if (!confirm("هل أنت متأكد من إزالة هذا الصديق؟")) return;
                    } else if (action === "cancel_request") {
                        if (!confirm("هل أنت متأكد من إلغاء طلب الصداقة؟")) return;
                    }

                    await handleFriendAction(action);
                });
            }

            if (likeButton) {
                likeButton.addEventListener("click", async function() {
                    try {
                        this.disabled = true;
                        const icon = this.querySelector(".button-icon i");
                        const text = this.querySelector(".button-text");
                        const originalIcon = icon.className;
                        const originalText = text.textContent;

                        icon.className = "fas fa-spinner fa-spin";
                        text.textContent = "جارٍ التنفيذ...";

                        const response = await fetch("/profile/like", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ friendId: profileUserId })
                        });

                        const result = await response.json();
                        
                        if (result.success) {
                            document.getElementById("like-count").textContent = result.likes;
                            document.getElementById("ranking-count").textContent = result.ranking;
                            
                            this.classList.toggle("liked", result.liked);
                            icon.className = `fas ${result.liked ? "fa-heart-crack" : "fa-heart"}`;
                            text.textContent = result.liked ? "إلغاء الإعجاب" : "إعجاب";
                            
                            loadRankingDetails();
                        } else {
                            showNotification(result.message, "error");
                            icon.className = originalIcon;
                            text.textContent = originalText;
                        }
                    } catch (error) {
                        showNotification("حدث خطأ أثناء معالجة الإعجاب", "error");
                    } finally {
                        this.disabled = false;
                    }
                });
            }

            const editQuoteButton = document.getElementById('edit-quote-button');
            const saveQuoteButton = document.getElementById('save-quote-button');
            const quoteEditor = document.getElementById('quote-editor');

            if (editQuoteButton && saveQuoteButton && quoteEditor) {
                editQuoteButton.addEventListener('click', function() {
                    quoteEditor.readOnly = false;
                    quoteEditor.focus();
                    editQuoteButton.style.display = 'none';
                    saveQuoteButton.style.display = 'inline-block';
                    quoteEditor.style.border = '2px solid #ff7e5f';
                });

                saveQuoteButton.addEventListener('click', async function() {
                    try {
                        const newQuote = quoteEditor.value.trim();
                        
                        const response = await fetch('/profile/update-quote', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ quote: newQuote })
                        });

                        const result = await response.json();

                        if (result.success) {
                            quoteEditor.readOnly = true;
                            editQuoteButton.style.display = 'inline-block';
                            saveQuoteButton.style.display = 'none';
                            quoteEditor.style.border = 'none';
                            showNotification('تم تحديث الاقتباس بنجاح', 'success');
                        } else {
                            showNotification(result.message || 'حدث خطأ أثناء تحديث الاقتباس', 'error');
                        }
                    } catch (error) {
                        showNotification('حدث خطأ في الشبكة', 'error');
                    }
                });

                quoteEditor.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        quoteEditor.readOnly = true;
                        editQuoteButton.style.display = 'inline-block';
                        saveQuoteButton.style.display = 'none';
                        quoteEditor.style.border = 'none';
                        quoteEditor.value = "<%= user.quote || '' %>";
                    }
                });
            }

            document.querySelectorAll('.delete-form').forEach(function(form) {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const designId = form.getAttribute('data-design-id');
                    const btn = form.querySelector('button');
                    if (!confirm('هل أنت متأكد أنك تريد حذف هذا العمل؟')) return;
                    btn.disabled = true;
                    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                    try {
                        const response = await fetch(`/profile/design/delete/${designId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                        });
                        const res = await response.json();
                        if (res.success) {
                            // حذف العنصر من السلايدر
                            const slide = form.closest('.swiper-slide');
                            if (slide) {
                                slide.style.transition = 'opacity 0.3s, transform 0.3s';
                                slide.style.opacity = '0';
                                slide.style.transform = 'scale(0.8)';
                                setTimeout(() => {
                                    if (slide.parentElement) {
                                        slide.parentElement.removeChild(slide);
                                        if (window.swiper) window.swiper.update();
                                    }
                                }, 300);
                            }
                            showNotification('تم حذف العمل من المعرض بنجاح', 'success');
                        } else {
                            showNotification(res.message || 'حدث خطأ أثناء حذف العمل', 'error');
                        }
                    } catch (err) {
                        showNotification('حدث خطأ في الشبكة', 'error');
                    }
                    btn.disabled = false;
                    btn.innerHTML = '<i class="fas fa-trash-alt"></i>';
                });
            });

            const addDesignBtn = document.getElementById('add-design-btn');
            const addDesignForm = document.getElementById('add-design-form');
            const cancelDesignBtn = document.getElementById('cancel-design-btn');

            if (addDesignBtn && addDesignForm && cancelDesignBtn) {
                addDesignBtn.addEventListener('click', function() {
                    addDesignForm.style.display = 'block';
                    addDesignBtn.style.display = 'none';
                });

                cancelDesignBtn.addEventListener('click', function() {
                    addDesignForm.style.display = 'none';
                    addDesignBtn.style.display = 'block';
                    addDesignForm.reset();
                });

                addDesignForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const formData = new FormData(this);
                    const submitButton = this.querySelector('button[type="submit"]');
                    const originalText = submitButton.textContent;
                    submitButton.textContent = 'جارٍ الإضافة...';
                    submitButton.disabled = true;
                    try {
                        const response = await fetch('/profile/design/add', {
                            method: 'POST',
                            body: formData
                        });
                        const result = await response.json();
                        if (result.success && result.design) {
                            // أضف العنصر الجديد مباشرة إلى السلايدر
                            const swiperWrapper = document.querySelector('.design-swiper .swiper-wrapper');
                            if (swiperWrapper) {
                                // استخدم نفس منطق getCloudinaryImageUrl في السيرفر (نسخة جافاسكريبت)
                                function getCloudinaryImageUrlClient(image, fallback) {
                                    if (!image) return fallback || '/uploads/images/pngwing.com.png';
                                    if (image.startsWith('http')) return image;
                                    if (image.startsWith('/uploads/') || image.startsWith('/gallery/') || image.startsWith('/images/')) return image;
                                    // إذا كان مجرد اسم ملف (بدون مسار)، اعتبره من uploads/gallery
                                    return '/uploads/gallery/' + image;
                                }
                                // معالجة اسم الصورة إذا أرجع السيرفر فقط اسم الملف أو رابط Cloudinary
                                let imgSrc = getCloudinaryImageUrlClient(result.design.image, '/uploads/images/pngwing.com.png');
                                // إذا كان الرابط Cloudinary مباشر (http) استخدمه كما هو
                                // إذا كان اسم ملف فقط، أضف المسار المحلي
                                // إذا كان يبدأ بـ /uploads أو /gallery أو /images استخدمه كما هو
                                // (الدالة أعلاه تغطي كل الحالات)
                                const slide = document.createElement('div');
                                slide.className = 'swiper-slide';
                                slide.innerHTML = `
                                  <div class="gallery-item">
                                    <img src="${imgSrc}" alt="${result.design.title || 'عمل تصميم'}" loading="lazy" onerror="this.src='/uploads/images/pngwing.com.png'" />
                                    <form class="delete-form" data-design-id="${result.design.id}">
                                      <button type="submit" class="delete-btn design-delete-btn" aria-label="حذف العمل">
                                        <i class="fas fa-trash-alt"></i>
                                      </button>
                                    </form>
                                    <h3 class="title-card">
                                      <span class="marg-bott">${result.design.title || 'عنوان افتراضي'}</span>
                                      <span class="subtitle">${result.design.subtitle || ''}</span>
                                    </h3>
                                  </div>
                                `;
                                swiperWrapper.prepend(slide);
                                if (window.swiper) window.swiper.update();
                                // إعادة تفعيل زر الحذف الجديد مع فلاش تنبيه
                                slide.querySelector('.delete-form').addEventListener('submit', async function(e) {
                                    e.preventDefault();
                                    const form = this;
                                    const designId = form.getAttribute('data-design-id');
                                    const btn = form.querySelector('button');
                                    if (!confirm('هل أنت متأكد أنك تريد حذف هذا العمل؟')) return;
                                    btn.disabled = true;
                                    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                                    try {
                                        const response = await fetch(`/profile/design/delete/${designId}`, {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                        });
                                        const res = await response.json();
                                        if (res.success) {
                                            const slide = form.closest('.swiper-slide');
                                            if (slide) {
                                                slide.style.transition = 'opacity 0.3s, transform 0.3s';
                                                slide.style.opacity = '0';
                                                slide.style.transform = 'scale(0.8)';
                                                setTimeout(() => {
                                                    if (slide.parentElement) {
                                                        slide.parentElement.removeChild(slide);
                                                        if (window.swiper) window.swiper.update();
                                                    }
                                                }, 300);
                                            }
                                            showNotification('تم حذف العمل من المعرض بنجاح', 'success');
                                        } else {
                                            showNotification(res.message || 'حدث خطأ أثناء حذف العمل', 'error');
                                        }
                                    } catch (err) {
                                        showNotification('حدث خطأ في الشبكة', 'error');
                                    }
                                    btn.disabled = false;
                                    btn.innerHTML = '<i class="fas fa-trash-alt"></i>';
                                });
                            }
                            showNotification('تم إضافة العمل بنجاح إلى المعرض', 'success');
                            addDesignForm.reset();
                            addDesignForm.style.display = 'none';
                            addDesignBtn.style.display = 'block';
                        } else {
                            showNotification(result.message || 'حدث خطأ أثناء إضافة العمل', 'error');
                            submitButton.textContent = originalText;
                            submitButton.disabled = false;
                        }
                    } catch (error) {
                        showNotification('حدث خطأ في الشبكة', 'error');
                        submitButton.textContent = originalText;
                        submitButton.disabled = false;
                    }
                });
            }

            const requestStoreButton = document.getElementById('request-store-button');
            if (requestStoreButton) {
                requestStoreButton.addEventListener('click', function() {
                    const modal = document.createElement('div');
                    modal.style.cssText = `
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(0,0,0,0.8);
                        z-index: 10000;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        padding: 20px;
                    `;
                    
                    modal.innerHTML = `
                        <div style="
                            background: white;
                            border-radius: 15px;
                            padding: 30px;
                            max-width: 500px;
                            width: 100%;
                            position: relative;
                        ">
                            <button onclick="this.closest('div').parentElement.remove(); document.body.style.overflow = 'auto';" style="
                                position: absolute;
                                top: 15px;
                                right: 20px;
                                background: none;
                                border: none;
                                font-size: 1.5rem;
                                cursor: pointer;
                                color: #666;
                            ">
                                <i class="fas fa-times"></i>
                            </button>
                            
                            <h2 style="margin-bottom: 20px; color: #333; text-align: center;">
                                <i class="fas fa-store"></i>
                                طلب إنشاء متجر
                            </h2>
                            
                            <form id="store-request-form">
                                <div style="margin-bottom: 20px;">
                                    <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">
                                        اسم المتجر
                                    </label>
                                    <input type="text" name="storeName" required style="
                                        width: 100%;
                                        padding: 12px;
                                        border: 2px solid #e9ecef;
                                        border-radius: 8px;
                                        font-size: 1rem;
                                    " placeholder="أدخل اسم متجرك">
                                </div>
                                
                                <div style="margin-bottom: 25px;">
                                    <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #333;">
                                        وصف المتجر
                                    </label>
                                    <textarea name="storeDescription" required rows="4" style="
                                        width: 100%;
                                        padding: 12px;
                                        border: 2px solid #e9ecef;
                                        border-radius: 8px;
                                        font-size: 1rem;
                                        resize: vertical;
                                    " placeholder="اكتب وصفاً مختصراً عن متجرك ونوع المنتجات التي ستبيعها"></textarea>
                                </div>
                                
                                <div style="display: flex; gap: 15px;">
                                    <button type="submit" style="
                                        flex: 1;
                                        padding: 12px;
                                        background: linear-gradient(45deg, #ff7e5f, #feb47b);
                                        color: white;
                                        border: none;
                                        border-radius: 8px;
                                        font-weight: 600;
                                        cursor: pointer;
                                        transition: all 0.3s ease;
                                    ">
                                        <i class="fas fa-paper-plane"></i>
                                        إرسال الطلب
                                    </button>
                                    <button type="button" onclick="this.closest('div').parentElement.remove(); document.body.style.overflow = 'auto';" style="
                                        flex: 1;
                                        padding: 12px;
                                        background: #6c757d;
                                        color: white;
                                        border: none;
                                        border-radius: 8px;
                                        font-weight: 600;
                                        cursor: pointer;
                                    ">
                                        إلغاء
                                    </button>
                                </div>
                            </form>
                        </div>
                    `;
                    
                    document.body.appendChild(modal);
                    document.body.style.overflow = 'hidden';
                    
                    document.getElementById('store-request-form').addEventListener('submit', async function(e) {
                        e.preventDefault();
                        
                        const formData = new FormData(this);
                        const submitButton = this.querySelector('button[type="submit"]');
                        const originalText = submitButton.innerHTML;
                        
                        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جارٍ الإرسال...';
                        submitButton.disabled = true;
                        
                        try {
                            const response = await fetch('/stores/request', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    storeName: formData.get('storeName'),
                                    storeDescription: formData.get('storeDescription')
                                })
                            });
                            
                            const result = await response.json();
                            
                            if (result.success) {
                                modal.remove();
                                document.body.style.overflow = 'auto';
                                showNotification('تم إرسال طلب إنشاء المتجر بنجاح! سيتم مراجعته من قبل الإدارة.', 'success');
                                
                                requestStoreButton.disabled = true;
                                requestStoreButton.innerHTML = '<i class="fas fa-clock"></i> تم إرسال الطلب';
                                requestStoreButton.style.background = '#6c757d';
                            } else {
                                showNotification(result.message || 'حدث خطأ أثناء إرسال الطلب', 'error');
                                submitButton.innerHTML = originalText;
                                submitButton.disabled = false;
                            }
                        } catch (error) {
                            showNotification('حدث خطأ في الشبكة', 'error');
                            submitButton.innerHTML = originalText;
                            submitButton.disabled = false;
                        }
                    });
                });
            }
        });
    </script>
</body>
</html>